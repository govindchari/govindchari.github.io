I"Ë<h2 id="introduction">Introduction</h2>

<p>Off the shelf solvers such as ECOS, SCS, Mosek, or Gurobi are good for prototyping and modest performance, but if you care about solving one problem class extremely quickly then these solvers will not give you maximum performance. In this post we will investigate a particular problem class (robust portfolio optimization) and solver (PIPG) to show how we can beat all off the shelf SOCP solvers by tuning our solver to our problem class.</p>
<h2 id="robust-portfolio-optimization">Robust Portfolio Optimization</h2>
<p>Formulate problem</p>

<p>Talk about classical case then extend to chance constraints</p>

<p>page 216 
https://web.stanford.edu/~boyd/papers/pdf/socp.pdf</p>

<h2 id="pipg">PIPG</h2>
<p>PIPG natively handles quadratic objectives. Most SOCP solvers need to put the quadratic objective in the constraints which results in a larger KKT system to solve.</p>

<p>We will use PIPG which I have an upcoming blog post about (cite xPIPG)
You take a step in your gradient direction augmented with the constraint gradient direction, then you do projection and dual update
PIPG uses projections to exactly satisfy set D constraints at every iteration</p>

<p>Parse problem into PIPG canonical form</p>

<p>Three constraints: SOC on all of x, non-negative orthant constraints on all elements of x, and equality constraint on x
Try putting SOC into D and no shorting into K and vice versa.</p>

<h2 id="results">Results</h2>
<hr />
:ET